# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeotecnicalDataExplorer
                                 A QGIS plugin
 Allow to explore data from the geotechnical database model

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-26
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Bruno Rodrigues
        email                : brunorodriguesoli@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from .pggeotec_utilities import utilsFunctions as utils
from scipy.stats import skew, spearmanr, pearsonr, kurtosis, variation, probplot, linregress
from numpy import mean, std, amin, median, amax, var, percentile, sort, arange


class statFunctions:
    def statisticsDescritive(layer, fieldName, useSelection):
        try:
            statistics = {'mean': 0, 'stddev':0, 'median': 0, 'minimun': 0, 'maximum': 0, 'variance': 0, 'skewness': 0, 'kurtosis': 0, 'cv': 0, 'upper_quartile': 0, 'lower_quartile': 0, 'count':0}
            resultData = utils.useSelectionOneVariable(layer, fieldName, useSelection)
            statistics['mean'] = mean(resultData)
            statistics['stddev'] = std(resultData)
            statistics['median'] = median(resultData)
            statistics['minimun'] = amin(resultData)
            statistics['maximum'] = amax(resultData)
            statistics['variance'] = var(resultData)
            statistics['skewness'] = skew(resultData)
            statistics['kurtosis'] = kurtosis(resultData)
            statistics['cv'] = variation(resultData)
            statistics['upper_quartile'] = percentile(resultData, 75)
            statistics['lower_quartile'] = percentile(resultData, 25)
            statistics['count'] = len(resultData)
            return statistics
        except (Exception) as error:
            print('Check function statisticsDescritive. Cannot execute function. Reason %s' % (error)) 
    
    def correlationAnalysis(layer, fieldName1, fieldName2, useSelection):
        try:
            statistics1 = {'pearson': 0, 'spearman': 0, 'mean': 0, 'stddev':0, 'median': 0, 'minimun': 0, 'maximum': 0, 'variance': 0, 'skewness': 0, 'kurtosis': 0, 'cv': 0, 'upper_quartile': 0, 'lower_quartile': 0, 'count':0}
            statistics2 = {'pearson': 0, 'spearman': 0, 'mean': 0, 'stddev':0, 'median': 0, 'minimun': 0, 'maximum': 0, 'variance': 0, 'skewness': 0, 'kurtosis': 0, 'cv': 0, 'upper_quartile': 0, 'lower_quartile': 0, 'count':0}
            resultDataOne = utils.useSelectionOneVariable(layer, fieldName1, useSelection)
            resultDataTwo = utils.useSelectionOneVariable(layer, fieldName2, useSelection)
            resultDataOne, resultDataTwo = utils.checkEqualNumberTwoVariables(resultDataOne, resultDataTwo)
            statistics1['mean'] = mean(resultDataOne)
            statistics1['stddev'] = std(resultDataOne)
            statistics1['median'] = median(resultDataOne)
            statistics1['minimun'] = amin(resultDataOne)
            statistics1['maximum'] = amax(resultDataOne)
            statistics1['variance'] = var(resultDataOne)
            statistics1['skewness'] = skew(resultDataOne)
            statistics1['kurtosis'] = kurtosis(resultDataOne)
            statistics1['cv'] = variation(resultDataOne)
            statistics1['upper_quartile'] = percentile(resultDataOne, 75)
            statistics1['lower_quartile'] = percentile(resultDataOne, 25)
            statistics1['count'] = len(resultDataOne)
            statistics1['pearson'] = pearsonr(resultDataOne, resultDataTwo)
            statistics1['spearman'] = spearmanr(resultDataOne, resultDataTwo)
            statistics2['mean'] = mean(resultDataTwo)
            statistics2['stddev'] = std(resultDataTwo)
            statistics2['median'] = median(resultDataTwo)
            statistics2['minimun'] = amin(resultDataTwo)
            statistics2['maximum'] = amax(resultDataTwo)
            statistics2['variance'] = var(resultDataTwo)
            statistics2['skewness'] = skew(resultDataTwo)
            statistics2['kurtosis'] = kurtosis(resultDataTwo)
            statistics2['cv'] = variation(resultDataTwo)
            statistics2['upper_quartile'] = percentile(resultDataTwo, 75)
            statistics2['lower_quartile'] = percentile(resultDataTwo, 25)
            statistics2['count'] = len(resultDataTwo)
            statistics2['pearson'] = statistics1['pearson']
            statistics2['spearman'] =  statistics1['spearman']
            return statistics1, statistics2, resultDataOne, resultDataTwo
        except (Exception) as error:
            print('Check function correlationAnalysis. Cannot execute function. Reason %s' % (error)) 
    
    def qqPlotData(layer, fieldName, useSelection):
        try:
            resultData = utils.useSelectionOneVariable(layer, fieldName, useSelection)
            res = probplot(resultData, dist='norm', plot=None)
            osm , osr = res[0]
            slope, intercept, r = res[1]
            slope, intercept, r, prob, sterrest = linregress(osm, osr)
            [xmin, xmax, ymin, ymax] = [amin(osm), amax(osm), amin(osr), amax(osr)]
            [posx, posy] = [(xmin + 0.70 * (xmax - xmin)), (ymin + 0.01 * (ymax - ymin))]
            return posx, posy, osm , osr, slope, intercept, r
        except (Exception) as error:
            print('Check function qqPlotData. Cannot execute function. Reason %s' % (error))

    def ecdfData(layer, fieldName, useSelection):
        try:
            resultData = utils.useSelectionOneVariable(layer, fieldName, useSelection)
            x = sort(resultData)
            n = x.size
            y = (arange(1, n+1)) / n
            return (x,y)
        except (Exception) as error:
            print('Check function ecdfData. Cannot execute function. Reason %s' % (error))  
    
    def calculateGridValues (resultDataLatCk, resultDataLongCk, resultDataElevCk):
        try:
            xMax, xMin = amax(resultDataLatCk), amin(resultDataLatCk)
            yMax, yMin = amax(resultDataLongCk), amin(resultDataLongCk)
            zMax, zMin = amax(resultDataElevCk), amin(resultDataElevCk)
            return xMax, xMin, yMax, yMin, zMax, zMin
        except (Exception) as error:
            print('Check function calculateGridValues. Cannot execute function. Reason %s' % (error))

